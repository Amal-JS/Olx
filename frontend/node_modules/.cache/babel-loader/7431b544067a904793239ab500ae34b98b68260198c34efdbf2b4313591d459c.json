{"ast":null,"code":"var _jsxFileName = \"D:\\\\DSF\\\\Olx\\\\frontend\\\\src\\\\components\\\\CustomContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useContext, createContext, useState, useEffect } from 'react';\n\n//global context object\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyContext = /*#__PURE__*/createContext();\n\n//component which holds the global state\nexport const CustomContext = ({\n  children\n}) => {\n  _s();\n  console.log('Custom context');\n  const [globalObject, setGlobalObject] = useState(\n  //global state contains the an object that holds a key which is userloggedin true or false and a key user and value username of logged in user\n  {\n    userLoggedIn: false,\n    user: {\n      username: ''\n    }\n  });\n\n  // function to update the state\n  const updateGlobalObject = newState => {\n    setGlobalObject(newState);\n  };\n  useEffect(() => {\n    const userData = localStorage.getItem('user');\n    if (user !== null) {\n      setGlobalObject({\n        userLoggedIn: true\n      });\n    }\n  }, []);\n  return (\n    /*#__PURE__*/\n    //Made the custom context and returning the Mycontext with the value an object which holds the userloggedin and username \n    //returning it\n    //Without passing the children prop and rendering the children within the <MyContext.Provider>, \n    //the nested components wouldn't have access to the context provided by <MyContext.Provider>\n    _jsxDEV(MyContext.Provider, {\n      value: {\n        globalObject,\n        updateGlobalObject\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n//get the global context object\n_s(CustomContext, \"zCsd/CcxQ4/fv+4qm7e4wYKeAvo=\");\n_c = CustomContext;\nexport const GetContext = () => {\n  _s2();\n  return useContext(MyContext);\n};\n_s2(GetContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n_c2 = GetContext;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomContext\");\n$RefreshReg$(_c2, \"GetContext\");","map":{"version":3,"names":["useContext","createContext","useState","useEffect","jsxDEV","_jsxDEV","MyContext","CustomContext","children","_s","console","log","globalObject","setGlobalObject","userLoggedIn","user","username","updateGlobalObject","newState","userData","localStorage","getItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","GetContext","_s2","_c2","$RefreshReg$"],"sources":["D:/DSF/Olx/frontend/src/components/CustomContext.js"],"sourcesContent":["import {useContext , createContext ,useState ,useEffect} from 'react'\r\n\r\n\r\n//global context object\r\nconst MyContext = createContext()\r\n\r\n//component which holds the global state\r\nexport const  CustomContext = ({children}) => {\r\n\r\n    console.log('Custom context')\r\n    const [globalObject , setGlobalObject] = useState(\r\n\r\n        //global state contains the an object that holds a key which is userloggedin true or false and a key user and value username of logged in user\r\n        {\r\n            userLoggedIn : false,\r\n            user : {username:''},\r\n         \r\n    })\r\n\r\n    // function to update the state\r\n    const updateGlobalObject  = (newState)=>{\r\n        setGlobalObject(newState)\r\n\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const userData = localStorage.getItem('user')\r\n        if (user !== null){\r\n            setGlobalObject({\r\n                userLoggedIn:true,\r\n                \r\n            })\r\n        }\r\n    },[])\r\n\r\n\r\n    return (\r\n\r\n        //Made the custom context and returning the Mycontext with the value an object which holds the userloggedin and username \r\n        //returning it\r\n        //Without passing the children prop and rendering the children within the <MyContext.Provider>, \r\n        //the nested components wouldn't have access to the context provided by <MyContext.Provider>\r\n        <MyContext.Provider value={{globalObject,updateGlobalObject}} >\r\n            {children}\r\n        </MyContext.Provider>\r\n    )\r\n}\r\n\r\n\r\n//get the global context object\r\nexport  const GetContext =()=>{\r\n\r\n    return useContext(MyContext)\r\n}"],"mappings":";;;AAAA,SAAQA,UAAU,EAAGC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAO,OAAO;;AAGrE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,gBAAGL,aAAa,CAAC,CAAC;;AAEjC;AACA,OAAO,MAAOM,aAAa,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAE1CC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EAC7B,MAAM,CAACC,YAAY,EAAGC,eAAe,CAAC,GAAGX,QAAQ;EAE7C;EACA;IACIY,YAAY,EAAG,KAAK;IACpBC,IAAI,EAAG;MAACC,QAAQ,EAAC;IAAE;EAE3B,CAAC,CAAC;;EAEF;EACA,MAAMC,kBAAkB,GAAKC,QAAQ,IAAG;IACpCL,eAAe,CAACK,QAAQ,CAAC;EAE7B,CAAC;EAEDf,SAAS,CAAC,MAAI;IACV,MAAMgB,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC7C,IAAIN,IAAI,KAAK,IAAI,EAAC;MACdF,eAAe,CAAC;QACZC,YAAY,EAAC;MAEjB,CAAC,CAAC;IACN;EACJ,CAAC,EAAC,EAAE,CAAC;EAGL;IAAA;IAEI;IACA;IACA;IACA;IACAT,OAAA,CAACC,SAAS,CAACgB,QAAQ;MAACC,KAAK,EAAE;QAACX,YAAY;QAACK;MAAkB,CAAE;MAAAT,QAAA,EACxDA;IAAQ;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO;EAAC;AAE7B,CAAC;;AAGD;AAAAlB,EAAA,CA1CcF,aAAa;AAAAqB,EAAA,GAAbrB,aAAa;AA2C3B,OAAQ,MAAMsB,UAAU,GAAEA,CAAA,KAAI;EAAAC,GAAA;EAE1B,OAAO9B,UAAU,CAACM,SAAS,CAAC;AAChC,CAAC;AAAAwB,GAAA,CAHaD,UAAU;AAAAE,GAAA,GAAVF,UAAU;AAAA,IAAAD,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}